---
title: "Network Analysis Vignette"
author: "Ivy Li, Yamileth Martinez, Jade O'Brien, Samantha Su"
date: today
format: html
---

# Overview

In this vignette, we will explore basic network analysis using the `igraph` package on the `congress_network` dataset. Network analysis helps us explore and understand the structure of a network; in this case, the Twitter interactions of the 117th Congress. Our objective in this vignette is to analyze whether particular attributes such as party affiliation, chamber, and the geographical region of a member of Congress influences who they interact with on Twitter.

# Data

The `congress_network_data.json` file is a network that represents the Twitter interaction network for the 117th United States Congress, taking into account the House of Representatives as well as the Senate. The `congress_node_attributes` file contains vertex attributes that include the name of the congressperson, their respective chamber, party affiliation, state, and Census Bureau-designated region of the state.

# Methodology

We perform our analysis in R using the `rjson` and `igraph` packages. We read in the data from the `rjson` file using our preprocessing script, as shown below. To read in the data from a `json` file, we transformed the data into a dataframe.

```{r}
source(here::here("scripts/preprocessing.R"))
library(tidyverse)
library(rjson)
library(igraph)
library(knitr)
library(Matrix)

# Read in the JSON file
network_json <- fromJSON(file = here::here("data/congress_network/congress_network_data.json"))

# Use the preprocessing function
network_df <- cnet_json_to_df(network_json)

# Create congress twitter graph
cnet_igraph <- create_cnet_igraph(network_df)

```

# Important Terms and Information

When dealing with network data observations are typically referred to as *nodes* or *vertices*, and the connections between them are called *edges*.

*Node attributes* are the properties of individual observations, like someone's age. Whereas *edge attributes* are information about the relationships between nodes, such as the type of relationship or its strength. 

Additionally, network data can be directed or undirected. In a directed network, edges originate from a particular node (known as the *source*) and terminate in another (known as the *target*). In contrast  no such directionality exists for undirected networks. For example, if we had data on a network of people in a gift exchange, this could be represented as a directed network where edges originate from the person giving a gift and terminate at the person receiving that particular gift.

The data that we will be analyzing in this vignette is a weighted, directed network. This means that our edges have direction, and that there is a single edge attribute, known as the weight. The edge weights in this data are referred to as transmission weights and they essentially represent the probability that the source retweets, quote tweets, replies to, or mentions the target after the target tweets. 


# Data Visualization

The main package in R used for making network visualizations is `igraph`. After converting the `rjson` file to a dataframe and taking into account the `congress_node_attributes` file, we can use the package `igraph` for making our network visualization. This package allows us to visualize the entire network as well as different different subgroups. We aim to improve both graphs using random sampling. Below we shall try to create a visualization of the entire network.


```{r}
plot(cnet_igraph)
```


As we can see, the plot is impossible to read, there are too many nodes, and we did not specify what attribute should be used as the vertex labels.

To fix this, we are going to randomly sample 50 observations from our data and create a subgraph of the entire network using this sample. Reducing the number of nodes we use will drastically improve the visibility of the graph. Additionally we will adjust the size of nodes, remove node labels, color nodes based on party affiliation, and adjust the size of edges based on its weight to further enhance readability.

We then tried creating subgraphs, having filtered the nodes by certain attributes: party and region, as shown below.

```{r, eval = FALSE}
# nodes filtered by attributes (party and region)
sub_nodes <- V(g1)[Party %in% c("D", "R") | Region %in% c("Midwest", "South")]

sub_g <- induced_subgraph(g1, vids = sub_nodes)

plot(sub_g)
```

We have the same issue as the our first plot, where it is impossible to read. To address this we will use the same method.

Below, you can see that we have taken a random sample of people, having taken these people from our attributes data frame. We then matched these people to their connections in the network data frame and plotted this random sample. We can further reduce the noise by filtering the data based on certain attributes, which although it is not depicted below, can be done.

```{r}
# sample from node attributes, then name in sample 
set.seed(123)
sample_indices <- sample(nrow(cnet_node_attributes), size = 25)
sample_nodes <- cnet_node_attributes[sample_indices,]

# want to make sure the attributes and nodes match
id_node <- sample_nodes$name
id_from <- network_df$from
id_to <- network_df$to
net_sam <- data.frame(from = double(),
                      to = integer(),
                      weight = double())

for (i in id_node){
  if (i %in% id_to | i %in% id_from){
    matches_from <- subset(network_df, from == i)
    matches_to <- subset(network_df, to == i)
    net_sam <- rbind(net_sam, matches_from, matches_to)
  }
}

net_sam <- subset(net_sam, from %in% sample_nodes$name & to %in% sample_nodes$name)

g2 <- graph_from_data_frame(net_sam,
                            directed = TRUE,
                            vertices = sample_nodes)

# colors based on party
V(g2)$color <- ifelse(V(g2)$Party == "D", "blue", 
                      ifelse(V(g2)$Party == "R", "red", "gray"))

# color based on weight
E(g2)$color <- ifelse(E(g2)$weight > .025, "darkred", "black")

plot(g2,
     edge.width = 2,
     edge.color = E(g2)$color,
     edge.curved = 0.2,
     edge.arrow.size = 0.5,
     edge.color = "black",
     vertex.color = V(g2)$color, 
     vertex.size = 30,
     vertex.frame.color = "black",
     vertex.label.color = "white",
     layout = layout_with_fr)  
```

# Graph/Subgraph Metrics and Hypothesis Testing

```{r}
cnet_subgraph_dem <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "party"
      ) %>%
      `==`("D") 
  )

cnet_subgraph_rep <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "party"
      ) %>%
      `==`("R") 
  )

cnet_subgraph_senate <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "chamber"
      ) %>%
      `==`("Senate")
  )

cnet_subgraph_house <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "chamber"
      ) %>%
      `==`("House")
  )

cnet_subgraph_midwest <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "region"
      ) %>%
      `==`("Midwest") %>%
      replace_na(FALSE)
  )

cnet_subgraph_west <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "region"
      ) %>%
      `==`("West") %>%
      replace_na(FALSE)
  )

cnet_subgraph_south <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "region"
      ) %>%
      `==`("South") %>%
      replace_na(FALSE)
  )

cnet_subgraph_northeast <- cnet_igraph %>%
  subgraph(
    cnet_igraph %>%
      vertex_attr(
        "region"
      ) %>%
      `==`("Northeast") %>%
      replace_na(FALSE)
  )

graphs <- paste(rep("cnet_subgraph", 8), 
                c("dem", "rep", "house", "senate", "midwest", "west", "south", "northeast"),
                sep = "_")

metrics <- c("reciprocity", "transitivity", "edge_density", "mean_distance")

graph_metrics <- lapply(c("cnet_igraph", graphs), 
       function(graph) {
         lapply(metrics,
                function(metric) {
                  get(metric, mode = "function")(get(graph))
                })
})

graph_metrics %>% 
  unlist() %>%
  matrix(
    ncol = length(metrics),
    byrow = TRUE
  ) %>%
  `colnames<-`(metrics) %>%
  `rownames<-`(c("overall", c("dem", "rep", "house", "senate", "midwest", "west", "south", "northeast"))) %>%
  kable()
```

```{r, cache = TRUE}
# bootstrap t-test to compare statistic of a subgraph to the overall graph
bootstrap.t.test <- function(graph, subgraph, statistic, n, type = c("upper", "lower", "two-tailed")) {
  
  # get number of nodes in graph and subgraph
  n.graph <- graph %>% length()
  n.subgraph <- subgraph %>% length()
  
  # extract function to get statistic
  statistic <- get(statistic, mode = "function")
  
  # calculate distribution of the statistic of interest through random sampling
  stat.dist <- lapply(
    1:n,
    function(i) {
      graph %>%
        subgraph(
          sample(n.graph, n.subgraph)
        ) %>%
        statistic()
    }
  ) %>% unlist()
  
  # calculate mean of the distribution
  dist.mean <- mean(stat.dist)
  
  # calculate test statistic
  test.stat <- subgraph %>% statistic()
  
  
  # calculate p-value
  if (type == "upper") {
    pval <- sum(stat.dist >= test.stat)/n
  }
  else if (type == "lower") {
    pval <- sum(stat.dist <= test.stat)/n
  }
  else if (type == "two-tailed") {
    pval <- sum(stat.dist >= dist.mean + abs(test.stat - dist.mean))/n + 
      sum(abs(stat.dist <= dist.mean - abs(test.stat - dist.mean)))/n
  }
  
  stat.dist.center <- stat.dist - dist.mean
  test.stat.center <- test.stat - dist.mean
  
  out <- list(
    dist = stat.dist,
    stat = test.stat,
    pval = pval
  )
  
  return(out)
}

bootstrap.test.results <- matrix(
  data = rep(rep(0, length(groups)), length(metrics)),
  nrow = length(graphs), 
  ncol = length(metrics), 
  dimnames = (list(c("dem", "rep", "house", "senate", "midwest", "west", "south", "northeast"), metrics))
)

if(FALSE) {
for (i in 1:length(graphs)) {
  for (j in 1:length(metrics)) {
    bootstrap.test.results[i,j] <- bootstrap.t.test(cnet_igraph, get(graphs[i]), metrics[j], 10000, "lower")$pval
  }
}
}

load(file = "data/bootstrap-test-results.RData")

bootstrap.test.results %>%
  kable()
```

# Adjacency Matrices

```{r, cache = TRUE}
cnet_adj <- as_adjacency_matrix(cnet_igraph)

reorder_cnet_adj <- function(adj_mat, attribute) {
  node_attributes <- read_csv("data/congress_node_attributes.csv")
  
  new_order <- node_attributes %>% 
    mutate(
      rand_order = sample(node)
    ) %>%
    arrange(
      get(attribute), rand_order
    ) %>%
    mutate(
      new_order = row_number()
    ) %>%
    arrange(
      node
    ) %>%
    pull(
      new_order
    )
  
  new_adj_mat <- adj_mat
  for (i in 1:475) {
    for (j in 1:475) {
      new_adj_mat[new_order[i], new_order[j]] <- adj_mat[i,j]
    }
  }
  
  return(new_adj_mat)
}

cnet_adj_chamber <- reorder_cnet_adj(cnet_adj, "chamber")
cnet_adj_party <- reorder_cnet_adj(cnet_adj, "party")
cnet_adj_state <- reorder_cnet_adj(cnet_adj, "state")
cnet_adj_region <- reorder_cnet_adj(cnet_adj, "region")

cnet_adj_chamber %>%
  Matrix() %>%
  image(
    col.regions = c("black"),
    sub = NULL,
    xlab = NULL,
    ylab = NULL
  )

cnet_adj_party %>%
  Matrix() %>%
  image(
    col.regions = c("black"),
    sub = NULL,
    xlab = NULL,
    ylab = NULL
  )

cnet_adj_state %>%
  Matrix() %>%
  image(
    col.regions = c("black"),
    sub = NULL,
    xlab = NULL,
    ylab = NULL
  )

cnet_adj_region %>%
  Matrix() %>%
  image(
    col.regions = c("black"),
    sub = NULL,
    xlab = NULL,
    ylab = NULL
  )
```
