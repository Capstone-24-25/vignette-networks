---
title: "Network Analysis Vignette"
author: "Ivy Li, Yamileth Martinez, Jade O'Brien, Samantha Su"
date: today
format: html
---

# Overview
For this vignette, we will be using network analysis. Network analysis helps us understand the structure of a relationship in social networks; in this case, the Twitter interactions between different political parties. Our objective in this vignette is to use network analysis to help us identify the most influential people or groups and the defining characteristics of certain groups of users. Through this we can identify network centrality and identify crucial points.

# Data
The `congress_network_data.json` file is a network that represents the Twitter interaction network for the 117th United States Congress, taking into account the House of Representatives as well as the Senate. The `congress_node_attributes` file contains vertex attributes that include the name of the congressmen, their respective chamber, party affiliation, state, and Census Bureau-designated region of the state.

# Methodology
We perform our analysis in R using the `rjson` and `igraph` packages. We read in the data from the `rjson` file using our preprocessing script, as shown below. To read in the data from a `json` file, we transformed the data into a dataframe.

```{r}
source(here::here("scripts/preprocessing.R"))
library(tidyverse)
library(rjson)
library(igraph)

# Read in the JSON file
network_json <- fromJSON(file = here::here("data/congress_network/congress_network_data.json"))

# Use the preprocessing function
network_df <- cnet_json_to_df(network_json)

# Read in the node attributes
cnet_node_attributes <- read_csv(here::here("data/congress_node_attributes.csv"),
                                   show_col_types = FALSE)
```

# Important Terms and Information

When dealing with network data observations are typically referred to as *nodes* or *vertices*, and the connections between them are called *edges*.

*Node attributes* are the properties of individual observations, like someone's age. Whereas *edge attributes* are information about the relationships between nodes, such as the type of relationship or its strength. 

Additionally, network data can be directed or undirected. In a directed network, edges originate from a particular node (known as the *source*) and terminate in another (known as the *target*). In contrast  no such directionality exists for undirected networks. For example, if we had data on a network of people in a gift exchange, this could be represented as a directed network where edges originate from the person giving a gift and terminate at the person receiving that particular gift.

The data that we will be analyzing in this vignette is a weighted, directed network. This means that our edges have direction, and that there is a single edge attribute, known as the weight. The edge weights in this data are referred to as transmission weights and they essentially represent the probability that the source retweets, quote tweets, replies to, or mentions the target after the target tweets. 


# Data Visualization

The main package in R used for making network visualizations is `igraph`. After converting the `rjson` file to a dataframe and taking into account the `congress_node_attributes` file, we can use the package `igraph` for making our network visualization. This package allows us to visualize the entire network as well as different different subgroups. We aim to improve both graphs using random sampling. Below we shall try to create a visualization of the entire network.


```{r}
g1 <- graph_from_data_frame(network_df, 
                      directed = TRUE, 
                      vertices = cnet_node_attributes)
plot(g1)

```


As we can see, the plot is impossible to read, there are too many nodes, and we did not specify what attribute should be used as the vertex labels.

To fix this, we are going to randomly sample 50 observations from our data and create a subgraph of the entire network using this sample. Reducing the number of nodes we use will drastically improve the visibility of the graph. Additionally we will adjust the size of nodes, remove node labels, color nodes based on party affiliation, and adjust the size of edges based on its weight to further enhance readability.

We then tried creating subgraphs, having filtered the nodes by certain attributes: party and region, as shown below.
```{r}
# nodes filtered by attributes (party and region)
sub_nodes <- V(g1)[Party %in% c("D", "R") | Region %in% c("Midwest", "South")]

sub_g <- induced_subgraph(g1, vids = sub_nodes)

plot(sub_g)
```
We have the same issue as the our first plot, where it is impossible to read. To address this we will use the same method.


