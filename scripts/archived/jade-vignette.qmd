---
title: "Network Analysis Vignette"
date: today
format: html
---
# Important Terms and Information

When dealing with network data observations are typically referred to as *nodes* or *vertices*, and the connections between them are called *edges*.

*Node attributes* are the properties of individual observations, like someone's age. Whereas *edge attributes* are information about the relationships between nodes, such as the type of relationship or its strength. 

Additionally, network data can be directed or undirected. In a directed network, edges originate from a particular node (known as the *source*) and terminate in another (known as the *target*). In contrast  no such directionality exists for undirected networks. For example, if we had data on a network of people in a gift exchange, this could be represented as a directed network where edges originate from the person giving a gift and terminate at the person receiving that particular gift.

The data that we will be analyzing in this vignette is a weighted, directed network. This means that our edges have direction, and that there is a single edge attribute, known as the weight. The edge weights in this data are referred to as transmission weights and they essentially represent the probability that the source retweets, quote tweets, replies to, or mentions the target after the target tweets. 


# Data Visualizations

```{r}
library(tidyverse)
library(rjson)
library(igraph)

# Function to get edges going into the ith node from .json file into dataframe
get_edges_in <- function(i, .json) {
  
  # Get list of edges going in
  from <- .json[[1]]$inList[[i]] 
  if (length(from) != 0) {
    from <- from + 1
  }
  
  # Create vector of target node
  to <- rep(i, length(from))
  
  # Get corresponding weights
  weight <- .json[[1]]$inWeight[[i]]
  
  # Bind to existing dataframe
  out <- data.frame(from = from, to = to, weight = weight)
  
  return(out)
}

# Function to convert Congress data from .json to dataframe
cnet_json_to_df <- function(.json) {
  out <- lapply(1:475, get_edges_in, .json = .json) %>%
    bind_rows()
  return(out)
}

# Function to create Congress igraph with node attributes from dataframe
create_cnet_igraph <- function(json_to_df.out) {
  cnet_node_attributes <- read_csv(here::here("data/congress_node_attributes.csv"),
                                   show_col_types = FALSE)
  out <- graph_from_data_frame(json_to_df.out, 
                               directed = TRUE, vertices = cnet_node_attributes)
  
  return(out)
}

network_json <- fromJSON(file = here::here("data/congress_network/congress_network_data.json"))

network_df <- cnet_json_to_df(network_json)
cnet_node_attributes <- read_csv(here::here("data/congress_node_attributes.csv"),
                                   show_col_types = FALSE)
```

The main package in R used for making network visualizations is `igraph`. Below we shall try to create a visualization of the entire network.


```{r}
g1 <- graph_from_data_frame(network_df, 
                      directed = TRUE, 
                      vertices = cnet_node_attributes)
plot(g1)

```


As we can see, the plot is impossible to read, there are too many nodes, and we did not specify what attribute should be used as the vertex labels.

To fix this, we are going to randomly sample 
